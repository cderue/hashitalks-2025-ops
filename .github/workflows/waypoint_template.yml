import yaml
import jsonschema
import argparse
import sys
from typing import Dict, List, Union, Any, Optional


class WaypointTemplateLinter:
    def __init__(self):
        self.schema = self._define_schema()

    def _define_schema(self) -> Dict[str, Any]:
        """Define the JSON schema for validating HCP Waypoint templates."""
        return {
            "type": "object",
            "required": ["namespace", "application_template"],
            "properties": {
                "namespace": {
                    "type": "object",
                    "required": ["id"],
                    "properties": {
                        "id": {"type": "string"},
                        "location": {
                            "type": "object",
                            "properties": {
                                "region": {
                                    "type": "object",
                                    "required": ["provider", "region"],
                                    "properties": {
                                        "provider": {"type": "string"},
                                        "region": {"type": "string"}
                                    }
                                }
                            }
                        }
                    }
                },
                "application_template": {
                    "type": "object",
                    "required": ["id", "name"],
                    "properties": {
                        "id": {"type": "string"},
                        "name": {"type": "string"},
                        "summary": {"type": "string"},
                        "description": {"type": "string"},
                        "readme_markdown_template": {"type": "string"},
                        "readme_template": {"type": "string"},
                        "labels": {
                            "type": "array",
                            "items": {"type": "string"}
                        },
                        "terraform_cloud_workspace_details": {
                            "type": "object",
                            "properties": {
                                "name": {"type": "string"},
                                "project_id": {"type": "string"}
                            }
                        },
                        "tags": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "required": ["key"],
                                "properties": {
                                    "key": {"type": "string"},
                                    "value": {"type": "string"}
                                }
                            }
                        },
                        "action_cfg_refs": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "required": ["id"],
                                "properties": {
                                    "id": {"type": "string"},
                                    "name": {"type": "string"}
                                }
                            }
                        },
                        "variable_options": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "required": ["name"],
                                "properties": {
                                    "name": {"type": "string"},
                                    "variable_type": {"type": "string"},
                                    "options": {
                                        "type": "array",
                                        "items": {"type": "string"}
                                    },
                                    "user_editable": {"type": "boolean"},
                                    "description": {"type": "string"}
                                }
                            }
                        },
                        "variable_options_out_of_sync": {"type": "boolean"},
                        "module_source": {"type": "string"},
                        "tf_execution_mode": {"type": "string"},
                        "tf_agent_pool_id": {"type": "string"},
                        "module_id": {"type": "string"}
                    }
                },
                "use_module_readme": {"type": "boolean"}
            }
        }

    def validate_yaml_syntax(self, content: str) -> tuple[bool, Optional[str]]:
        """
        Validate that the content is valid YAML.
        
        Args:
            content: String containing YAML content
            
        Returns:
            tuple: (is_valid, error_message)
        """
        try:
            yaml.safe_load(content)
            return True, None
        except yaml.YAMLError as e:
            return False, f"YAML syntax error: {str(e)}"

    def validate_schema(self, content: str) -> tuple[bool, Optional[str]]:
        """
        Validate that the YAML content conforms to the HCP Waypoint template schema.
        
        Args:
            content: String containing YAML content
            
        Returns:
            tuple: (is_valid, error_message)
        """
        try:
            data = yaml.safe_load(content)
            jsonschema.validate(instance=data, schema=self.schema)
            return True, None
        except jsonschema.exceptions.ValidationError as e:
            return False, f"Schema validation error: {str(e)}"
        except Exception as e:
            return False, f"Unexpected error during schema validation: {str(e)}"

    def validate_file(self, file_path: str) -> tuple[bool, List[str]]:
        """
        Validate a YAML file against both syntax and schema.
        
        Args:
            file_path: Path to the YAML file
            
        Returns:
            tuple: (is_valid, list_of_errors)
        """
        errors = []
        try:
            with open(file_path, 'r') as file:
                content = file.read()
                
            # Validate YAML syntax
            syntax_valid, syntax_error = self.validate_yaml_syntax(content)
            if not syntax_valid:
                errors.append(syntax_error)
                return False, errors
                
            # Validate against schema
            schema_valid, schema_error = self.validate_schema(content)
            if not schema_valid:
                errors.append(schema_error)
                return False, errors
                
            return True, []
            
        except IOError as e:
            errors.append(f"File error: {str(e)}")
            return False, errors

    def validate_additional_rules(self, content: str) -> tuple[bool, List[str]]:
        """
        Implement additional validation rules beyond basic schema validation.
        
        Args:
            content: String containing YAML content
            
        Returns:
            tuple: (is_valid, list_of_warnings)
        """
        warnings = []
        data = yaml.safe_load(content)
        
        # Example rule: Check if module_id is present when module_source is specified
        app_template = data.get("application_template", {})
        if app_template.get("module_source") and not app_template.get("module_id"):
            warnings.append("Warning: module_source is specified but module_id is missing")
        
        # Example rule: Check if tf_agent_pool_id is present when tf_execution_mode is 'agent'
        if app_template.get("tf_execution_mode") == "agent" and not app_template.get("tf_agent_pool_id"):
            warnings.append("Warning: tf_execution_mode is 'agent' but tf_agent_pool_id is missing")
            
        # Add more business logic validation rules as needed
        
        return len(warnings) == 0, warnings


def main():
    parser = argparse.ArgumentParser(description='Validate HCP Waypoint template YAML files')
    parser.add_argument('files', metavar='file', type=str, nargs='+',
                        help='YAML files to validate')
    parser.add_argument('--strict', action='store_true',
                        help='Treat warnings as errors')
    
    args = parser.parse_args()
    linter = WaypointTemplateLinter()
    exit_code = 0
    
    for file_path in args.files:
        print(f"Validating {file_path}...")
        valid, errors = linter.validate_file(file_path)
        
        if not valid:
            exit_code = 1
            print(f"❌ {file_path} is invalid:")
            for error in errors:
                print(f"  - {error}")
            continue
        
        # If basic validation passes, perform additional rule checks
        try:
            with open(file_path, 'r') as file:
                content = file.read()
            rules_valid, warnings = linter.validate_additional_rules(content)
            
            if not rules_valid and args.strict:
                exit_code = 1
                print(f"❌ {file_path} has warnings (treated as errors in strict mode):")
                for warning in warnings:
                    print(f"  - {warning}")
            elif not rules_valid:
                print(f"⚠️ {file_path} has warnings:")
                for warning in warnings:
                    print(f"  - {warning}")
            else:
                print(f"✅ {file_path} is valid")
        except Exception as e:
            exit_code = 1
            print(f"❌ Error processing {file_path}: {str(e)}")
    
    sys.exit(exit_code)


if __name__ == "__main__":
    main()
